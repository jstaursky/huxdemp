vim: tw=80

# Huxdemp

Huxdemp is yet another hex dumping utility, born out of frustration with
existing alternatives to the venerable hexdump.

Here's a list of alternatives to hexdump that I have tried previously. If
huxdemp isn't your thing, you may want to try one of these:

* xd
* hexyl
* xxd


## Unu

This file is written in a dialect of Markdown that I use for literate
programming, heavily based on the `Unu' utility provided by Retroforth[0]. The
code goes between the ~~~. I use the unu binary to convert `.unuc' files to
`.c'.

Sometime in the future I may spin `unu' off into a full-blown project with
proper documentation and moar features.

If you want Vim to correctly highlight the code in between the fences, add this
to your ~/.vim/:

	" --- In ~/.vim/syntax/unuc.vim ---
	if exists("b:current_syntax")
		unlet! b:current_syntax
	endif

	syn include @srcC syntax/c.vim
	syn region code start="^\~\~\~$" end="^\~\~\~$" contains=@srcC

	" --- In ~/.vim/ftdetect/unuc.vim ---
	au BufRead,BufNewFile *.unuc set filetype=unuc


[0]: See https://forth.works


## The code

First, the includes.

* err.h: A little-known header that contains various utility functions for
  printing error/warning messages (see err(3)). It's used here for warn(3).

* ctype.h: Included for isprint(3), which checks whether a character is a
  control character or not.

* stdbool.h: Included for the `true'/`false' values.

* stdint.h: Included for `size_t', which is an unsigned integer type with a
  bitsize equivalent to the target machine's pointer size.  For example: on a
  32-bit machine, size_t == uint32_t, while on a 64-bit machine, size_t ==
  uint64_t.

* string.h: Used for `strcmp'/`strncmp', the sole string function used in this
  program.
* stdlib.h: used for `getenv'.
* unistd.h: used for `isatty' and the `STDOUT_FILENO' constant.

`size_t' used instead of `int' because it's faster to use an unsigned integer,
and it's almost always faster to use an integer with a bit size equivalent to
the CPU's word size(?).

TODO: remove the requirement for `unistd.h'.

~~~
#include <err.h>
#include <ctype.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <string.h>  /* for str(n)cmp */
#include <stdlib.h>  /* for getenv */
#include <unistd.h>  /* for isatty, STDOUT_FILENO */
~~~

Now to include other source files.

* arg.h: The ubiquitious arg.h you would find in many suckless.org projects.
  It's used to parse arguments in place of getopt, as I find it much easier
  to work with.

* tables.c: Various 'tables' of strings that are used to display characters.
  E.g. "·" for 0x12, "A" for 0x41, etc.

* utf8.c: An extremely simple UTF8 library proudly stolen from the termbox[1]
  source code.

The C files are directly included into main.c (instead of being compiled into
their own object files) because I'm too lazy to add a few more lines to the
Makefile.

[1]: https://github.com/nsf/termbox

~~~
#include "arg.h"
#include "tables.c"
#include "utf8.c"
~~~

Some utility macros.

~~~
#define MAX(V, H) ((V) > (H) ? (H) : (V))
#define OR(A, B)  ((A) ? (A) : (B))
~~~

Shut up, its for for readibility guis !!!

And anyways, programmars nowidays should stahp pretending like C's `char' is
really capable of holding a character

~~~
typedef unsigned char byte_t;
~~~

A single struct that holds all the options for this program.
`table' is set by the `-t' flag, `cntrls' is set by the `-c' flag, etc.

NOTE: _color is not set directly by the user; its value is determined after
the user has set the value of the `color' field.

~~~
struct {
	char **table;
	_Bool ctrls, utf8;

	enum {
		C_AUTO, C_ALWAYS, C_NEVER,
	} color;

	_Bool _color;

	size_t linelen;
} options;
~~~

Keep track of what UTF8 codepoint we're printing. This allows us to highlight
bytes that belong to the same Unicode codepoint.

This is reset after each file is processed, for obvious reasons.

{ <offset>, <length> }:
* Offset: the position of the first byte comprising the encoded UTF8 codepoint.
* Length: the number of bytes that make up the UTF8 codepoint.

~~~
static ssize_t utf8_state[] = { -1, -1 };
~~~

This function is run before each item of the byte column is printed to update
`utf8_state'.  It only actually updates `utf8_state' if either the first field
is -1, or we've passed the codepoint utf8_state keeps track of.

~~~
static inline void
_utf8state(ssize_t offset, byte_t _char)
{
	if (utf8_state[0] == -1 || utf8_state[0]+utf8_state[1] < offset) {
		utf8_state[0] = offset;
		utf8_state[1] = utf8_char_length(_char) - 1;
	}
}
~~~


A utility function to determine how we should display a character in the ASCII
column.

* If the byte is a control character and the user enabled `options.ctrl', we
  use some fancy Unicode graphics to display it (e.g. ␀ for 0x0).

* If the user has specified a table/style to use, use that byte's entry from
  that table (if the entry exists).

* Otherwise, return the byte itself (unless it's unprintable, in which case use
  a period.

~~~
static inline char *
_format_char(byte_t b)
{
	static char chbuf[2] = {0};

	if (options.ctrls && t_cntrls[b])
		return t_cntrls[b];

	if (options.table && options.table[b])
		return options.table[b];

	chbuf[0] = isprint(b) ? b : '.';
	return (char *)&chbuf;
}
~~~

Now the juicy bit -- the function which actually does the dirty work of
displaying the user's garbage.

~~~
static void
display(byte_t *buf, size_t sz, size_t offset)
{
~~~

Display the byte offset in hexadecimal, padding it with up to four spaces to
the left.

* `\x1b[37m': Display the text in light grey.
* `\x1b[m':   Reset the text's color.

  40    72 69 20 61 73 20 68 c3  ab 20 68 61 64 20 73 70    │ri as h·· had sp│
  50    6f 6b 65 6e 20 62 65 66  6f 72 65 20 69 6e 20 54    │oken before in T│
  60    c3 af 72 69 6f 6e 2e 20  7f 0a 0a                   │··rion. «__│
  ^~

~~~
	printf("\x1b[37m%4zx\x1b[m    ", offset);
~~~

Display the byte column.

* Update the UTF8 state.

* If we're halfway through, print a space. This splits the byte column into two
  columns.

* Print an escape sequence to set the background of the hex digits depending on
  whether it belongs to an encoded utf8 codepoint.

* Print the byte's hex digits, using the styling specified in tables.c.

* If we're "out" of the last utf8 codepoint sequence, reset the background
  color; otherwise, only reset the foreground color and remove the bold
  formatting (if any).

  40    72 69 20 61 73 20 68 c3  ab 20 68 61 64 20 73 70    │ri as h·· had sp│
  50    6f 6b 65 6e 20 62 65 66  6f 72 65 20 69 6e 20 54    │oken before in T│
  60    c3 af 72 69 6f 6e 2e 20  7f 0a 0a                   │··rion. «__│
        ^~~~~~~~~~~~~~~~~~~~~~~  ^~~~~~~~~~~~~~~~~~~~~~~

~~~
	for (size_t off = offset, i = 0; i < sz; ++i, ++off) {
		_utf8state((ssize_t)off, buf[i]);

		if (i == (options.linelen / 2))
			printf(" ");

		size_t bg = 0, fg = styles[buf[i]].hex;
		if (options.utf8 && utf8_state[1] > 0)
			bg = 100, fg = 97;

		printf("\x1b[%zum\x1b[%zum%02hx", bg, fg, buf[i]);

		if (utf8_state[0] + utf8_state[1] <= (ssize_t)off)
			printf("\x1b[m ");
		else
			printf("\x1b[37m\x1b[22m ");
	}
~~~

Reset the colors/formatting and print some padding:

  40    72 69 20 61 73 20 68 c3  ab 20 68 61 64 20 73 70    │ri as h·· had sp│
  50    6f 6b 65 6e 20 62 65 66  6f 72 65 20 69 6e 20 54    │oken before in T│
  60    c3 af 72 69 6f 6e 2e 20  7f 0a 0a                   │··rion. «__│
                                          ^~~~~~~~~~~~~~

The amount of padding is calculated like so:

LINELEN - sz   The number of hex digits that weren't printed on this line.
        *  3   Each hex digit takes up three columns.
        +  1   Only if the space that divides the two hex digit columns wasn't
               printed.

~~~
	printf("\x1b[m");
	if (options.linelen - sz > 0) {
		printf("%*s", (int)(options.linelen - sz) * 3, "");
		if (sz <= (options.linelen / 2))
			printf(" ");
	}
~~~

Now print the usual four spaces, a nice Unicode vertical line-drawing glyph, and
each character for the ASCII column styled with the escape codes specified in
tables.c.

  40    72 69 20 61 73 20 68 c3  ab 20 68 61 64 20 73 70    │ri as h·· had sp│
  50    6f 6b 65 6e 20 62 65 66  6f 72 65 20 69 6e 20 54    │oken before in T│
  60    c3 af 72 69 6f 6e 2e 20  7f 0a 0a                   │··rion. «__│
                                                            ^~~~~~~~~~~~~~~~~~

~~~
	printf("   │");
	for (size_t off = offset, i = 0; i < sz; ++i, ++off)
		printf("%s%s\x1b[m", OR(styles[buf[i]].esc1, ""),
			_format_char(buf[i]));
	printf("│\n");
}
~~~

This is a version of display() which is used when `options._color' is false.

* No fancy Unicode line-drawing characters are printed.
* We pad the offset with eight zeros, instead of four spaces.
* No escape codes are printed.

~~~
static void
display_nocolor(byte_t *buf, size_t sz, size_t offset)
{
	printf("%08zx    ", offset);

	for (size_t i = 0; i < sz; ++i) {
		if (i == (options.linelen / 2))
			printf(" ");
		printf("%02hx ", buf[i]);
	}

	if (options.linelen - sz > 0) {
		printf("%*s", (int)(options.linelen - sz) * 3, "");
		if (sz <= (options.linelen / 2))
			printf(" ");
	}

	printf("   |");
	for (size_t i = 0; i < sz; ++i)
		printf("%s", _format_char(buf[i]));
	printf("|\n");
}
~~~

The "main main" function that's called from main() after arguments are parsed.
We just take a path, open it (if it's not stdin), and call `display()' (or
`display_nocolor()', if colors are disabled) after reading LINELEN bytes.

~~~
static void
huxdemp(char *path)
{
	/* Reset UTF8 state for each file. */
	utf8_state[0] = utf8_state[1] = -1;

	FILE *fp = !strcmp(path, "-")
		? stdin : fopen(path, "r");

	if (fp == NULL) {
		warn("\"%s\"", path);
		return;
	}

	void (*func)(byte_t *, size_t, size_t);
	func = options._color ? display : display_nocolor;

	byte_t buf[options.linelen];
	size_t offset = 0;

	for (size_t r = 0; ;) {
		memset(buf, 0x0, sizeof(buf));
		if (!(r = fread(buf, 1, sizeof(buf), fp)))
			break;
		(func)(buf, r, offset);
		offset += r;
	}

	if (strcmp(path, "-"))
		fclose(fp);

	printf("\n");
}
~~~

Check whether we should use colors, based on whether the user selected `auto',
`always', or `never'.

If `auto':
* If stdout is not a terminal, no colors.
* If the $NO_COLOR environment variable is defined, then no colors.
* If $TERM is NULL or is set to "dumb", then no colors.
* Otherwise, enable colors.

~~~
static _Bool
_decide_color(void)
{
	if (options.color == C_ALWAYS)
		return true;
	if (options.color == C_NEVER)
		return false;

	if (!isatty(STDOUT_FILENO))
		return false;

	char *env_NOCOLOR = getenv("NO_COLOR");
	char *env_TERM = getenv("TERM");

	if (env_NOCOLOR)
		return false;

	if (!env_TERM || !strcmp(env_TERM, "dumb"))
		return false;

	return true;
}
~~~

Print a usage string and exit.

TODO: Change the _Noreturn attribute to a macro that checks if the compiler
supports _Noreturn first.

~~~
static _Noreturn void
_usage(char *argv0)
{
	printf("Usage: %s [-hV]\n", argv0);
	printf("       %s [-cu] [-t table] [-C color?] [FILE]...\n", argv0);
	printf("\n");
	printf("Flags:\n");
	printf("    -c  Use Unicode glyphs to display the lower control\n");
	printf("        chars (0 to 31). E.g. ␀ for NUL, ␖ for SYN (0x16), &c\n");
	printf("    -u  Highlight sets of bytes that 'belong' to the same UTF-8\n");
	printf("        encoded Unicode character.\n");
	printf("    -h  Print this help message and exit.\n");
	printf("    -V  Print huxd's version and exit.\n");
	printf("\n");
	printf("Options:\n");
	printf("    -l  Number of bytes to be displayed on a line. (default: 16)\n");
	printf("    -t  What 'table' or style to use.\n");
	printf("        Possible values: `default', `cp437', or `classic'.\n");
	printf("    -C  When to use fancy terminal formatting.\n");
	printf("        Possible values: `auto', `always', `never'.\n");
	printf("\n");
	printf("Arguments are processed in the same way that cat(1) does: any\n");
	printf("arguments are treated as files and read, a lone \"-\" causes huxd\n");
	printf("to read from standard input, &c.\n");
	printf("\n");
	printf("See the manpage huxd(1) for more documentation.\n");
	_Exit(0);
}
~~~

main main main

~~~
int
main(int argc, char *argv[])
{
~~~

Set some sensible default options.

~~~
	options.table = (char **)&t_default;
	options.ctrls = options.utf8 = false;
	options.color = C_AUTO;
	options.linelen = 16;
~~~

Parse arguments with `arg.h'. Yes, the macros are ugly. No, I am not going to
switch back to getopt.

~~~
	char *optarg;

	ARGBEGIN {
	break; case 'l':
		optarg = EARGF(_usage(argv0));
		options.linelen = strtol(optarg, NULL, 0);
	break; case 'c':
		options.ctrls = !options.ctrls;
	break; case 'u':
		options.utf8  = !options.utf8;
	break; case 't':
		optarg = EARGF(_usage(argv0));
		if (!strncmp(optarg, "cp", 2))
			options.table = (char **)&t_cp437;
		else if (!strncmp(optarg, "de", 2))
			options.table = (char **)&t_default;
		else if (!strncmp(optarg, "cl", 2))
			options.table = NULL;
		else
			_usage(argv0);
	break; case 'C':
		optarg = EARGF(_usage(argv0));
		if (!strncmp(optarg, "au", 2))
			options.color = C_AUTO;
		else if (!strncmp(optarg, "al", 2))
			options.color = C_ALWAYS;
		else if (!strncmp(optarg, "ne", 2))
			options.color = C_NEVER;
		else
			_usage(argv0);
	break; case 'v': case 'V':
		printf("huxd v"VERSION"\n");
		return 0;
	break; case 'h': case '?': default:
		_usage(argv0);
	} ARGEND
~~~

Now check whether we can use colors, depending on the user's input (if any).

~~~
	options._color = _decide_color();
~~~

Now process 'free' arguments the same way every sane POSIX application does: if
it's a lone dash, or there are no arguments, read from stdin; otherwise, treat
the argument as a file.

~~~
	if (!argc) {
		huxdemp("-");
	} else {
		for (; *argv; --argc, ++argv)
			huxdemp(*argv);
	}
~~~

I can't think of anything to say here. I'm beginning to wonder whether this
literate programming experiment was such a great idea.

~~~
	return 0;
}
~~~
